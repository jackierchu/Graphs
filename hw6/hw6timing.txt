1a. Results for InsertRandomSpeedTest for N = 1000000:

Inserting 1000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 1.46 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 1.05 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 1.43 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 0.76 sec.


1b. Results for InsertRandomSpeedTest for N = 2000000:

Inserting 2000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 3.18 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 2.29 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 3.51 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 1.83 sec.


1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?

The ECHashStringSet looks roughly linear in its scaling behavior because for N = 2000000, the time
it took was 2.29 which was roughly 2 * 1.05. Therefore, the ECHashStringSet is roughly
linear and not quadratic because if it were quadratic, there would be a time of along
the lines of 4 times 1.05.



2a. Results for InsertInOrderSpeedTest for N = 10000:

Inserting 10000 in-order strings into a StringSet of type BSTStringSet
Took: 0.64 sec.

Inserting 10000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.01 sec.

Inserting 10000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.02 sec.

Inserting 10000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.01 sec.


2b. Results for InsertInOrderSpeedTest for N = 20000:

Inserting 20000 in-order strings into a StringSet of type BSTStringSet
Took: 1.44 sec.

Inserting 20000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.04 sec.

Inserting 20000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.05 sec.

Inserting 20000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.03 sec.


2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?

The BST StringSet appears to be roughly linear, Theta(n), in its scaling. For N = 10000, the
time it took was 0.64 seconds and for N = 20000, the time it took was 1.44 seconds.
Even after running N = 30000, the time was 2.53 seconds. Therefore, the BST StringSet looks
roughly linear.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

